plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['clean'//,
////                                                      'connectedFakeServerDebugAndroidTest',
////                                                      'testFakeServerDebugUnitTest',
////                                                      'createFakeServerDebugCoverageReport'
//]) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class',
//                      '**/R$*.class',
//                      '**/BuildConfig.*',
//                      '**/Manifest*.*',
//                      '**/*Test*.*',
//                      'android/**/*.*',
//                      '**/*$[0-9].*',
//                      '**/Fake*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/fakeServerDebug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/kotlin"
//
//    sourceDirectories.setFrom(files([mainSrc]))
//    classDirectories.setFrom(files([debugTree]))
//    executionData.setFrom(fileTree(dir: project.buildDir, includes: ['**/*.exec',
//                                                                     '**/*.ec']))
//}

android {
    namespace 'com.kophe.le_sklad_zradn'
    compileSdk 33

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
    }

    dataBinding {
        enabled = true
    }

    buildFeatures {
        viewBinding = true
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def major = versionProps['VERSION_MAJOR']
        def minor = versionProps['VERSION_MINOR']
        def patch = versionProps['VERSION_PATCH']
        def build = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps['VERSION_BUILD'] = build.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.kophe.le_sklad_zradn"
            minSdkVersion 26
            targetSdkVersion 33
            versionCode build
            versionName "${major}.${minor}.${patch}"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    signingConfigs {
        release {
            project.logger.lifecycle('test log release signing')
            storeFile = file("le_sklad_key.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardError'
        }
    }
    testOptions {
        animationsDisabled true
        unitTests.returnDefaultValues = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests {
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    kapt {
        correctErrorTypes true
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 1000)
        }
    }
    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
            versionNameSuffix ""
        }
        staging {
            dimension "version"
            versionNameSuffix "-TEST"
        }
//        fake {
//            dimension "version"
//            versionNameSuffix "-fake"
//        }
    }
    sourceSets {
        prod.java.srcDir 'src/prod/java'
        staging.java.srcDir 'src/staging/java'
//        fake.java.srcDir 'src/fake/java'
    }
    defaultConfig {
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
}

dependencies {
    //default dependencies
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation project(path: ':leskladlib')
    implementation project(path: ':leskladuilib')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //orchestrator
    androidTestUtil 'androidx.test:orchestrator:1.4.1'

    //lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //dagger
    implementation 'com.google.dagger:dagger:2.40'
    implementation 'com.google.dagger:dagger-android-support:2.29.1'
    kapt 'com.google.dagger:dagger-compiler:2.29.1'
    implementation 'com.squareup:javapoet:1.13.0'
    kapt 'org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.4.0' //don't upgrade this apart of dagger

    //dagger android
    kapt 'com.google.dagger:dagger-android-processor:2.29.1'
    implementation 'com.google.dagger:dagger-android:2.35.1'

    //kotlin navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"
    androidTestImplementation "androidx.navigation:navigation-testing:2.5.3"

    //navigation dynamic
    implementation "androidx.navigation:navigation-dynamic-features-fragment:2.5.3"

    //leak canary
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    //mockito
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    //dagger test
    kaptTest 'com.google.dagger:dagger-compiler:2.29.1'

    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    //coroutines test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    //room
    implementation "androidx.room:room-runtime:2.5.1"
    implementation "androidx.room:room-ktx:2.5.1"
    kapt "androidx.room:room-compiler:2.5.1"

    //journeyapps
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    //firebase
    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation "com.google.firebase:firebase-storage-ktx:20.1.0"
    implementation 'com.firebaseui:firebase-ui-storage:7.2.0'

    //xlsx export
    implementation(group: 'com.aspose', name: 'aspose-cells', version: '23.3', classifier: 'android.via.java')
//
    //glide
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt 'com.github.bumptech.glide:compiler:4.15.1'

    //camera
    def camerax_version = "1.2.2"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"

    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"
}
